{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","title","setTitle","body","setBody","posts","setPosts","handleChange","target","name","value","resetUserInputs","getPosts","axios","url","then","response","data","catch","alert","useEffect","id","onSubmit","event","preventDefault","payload","method","console","log","className","type","placeholder","onChange","length","map","post","index","displayPosts","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","querySelector"],"mappings":"+LAyGeA,EAtGH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEQF,mBAAS,IAFjB,mBAETG,EAFS,KAEHC,EAFG,OAGUJ,mBAAS,IAHnB,mBAGTK,EAHS,KAGFC,EAHE,KAKVC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MAED,UAATD,EACFP,EAASQ,GACS,SAATD,GACTL,EAAQM,IA2BNC,EAAkB,WACtBT,EAAS,IACTE,EAAQ,KAGJQ,EAAW,WACfC,IAAM,CACJC,IAAK,SAEJC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtBX,EAASW,MAEVC,OAAM,WACLC,MAAM,8BAmBZ,OAJAC,qBAAU,WACRR,MACC,IAGD,cAAC,WAAD,UACE,sBAAKS,GAAG,YAAR,UACE,oBAAIA,GAAG,QAAP,oDACA,oBAAIA,GAAG,WAAP,gCACA,uBAAMA,GAAG,OAAOC,SA7DD,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAU,CACdxB,QACAE,QAIFU,IAAM,CACJC,IAAK,YACLY,OAAQ,OACRT,KAAMQ,IAELV,MAAK,WACJY,QAAQC,IAAI,oCACZjB,IACAC,OAEDM,OAAM,WACLS,QAAQC,IAAI,6BA0CZ,UACE,qBAAKC,UAAU,aAAf,SACE,uBACEC,KAAK,OACLrB,KAAK,QACLsB,YAAY,mBACZrB,MAAOT,EACP+B,SAAUzB,MAGd,qBAAKsB,UAAU,aAAf,SACE,0BACEpB,KAAK,OACLsB,YAAY,kBACZrB,MAAOP,EACP6B,SAAUzB,MAGd,wBAAQuB,KAAK,SAAb,uBAEF,qBAAKD,UAAU,kBAAf,SAxCe,SAACxB,GAEpB,OAAKA,EAAM4B,OACJ5B,EAAM6B,KAAI,SAACC,EAAMC,GAAP,OACf,sBAAKP,UAAU,QAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BM,EAAKlC,QACjC,mBAAG4B,UAAU,YAAb,SAA0BM,EAAKhC,SAFLiC,MAFJ,KAsCYC,CAAahC,WCvFxCiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,WAAD,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,UAMzBX,M","file":"static/js/main.f8f8aae3.chunk.js","sourcesContent":["import { React, Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [posts, setPosts] = useState([]);\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    if (name === \"title\") {\n      setTitle(value);\n    } else if (name === \"body\") {\n      setBody(value);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const payload = {\n      title,\n      body,\n    };\n    //console.log(payload);\n\n    axios({\n      url: \"/api/save\",\n      method: \"POST\",\n      data: payload,\n    })\n      .then(() => {\n        console.log(\"Data has been sent to the server\");\n        resetUserInputs();\n        getPosts();\n      })\n      .catch(() => {\n        console.log(\"Internal server error\");\n      });\n  };\n\n  const resetUserInputs = () => {\n    setTitle(\"\");\n    setBody(\"\");\n  };\n\n  const getPosts = () => {\n    axios({\n      url: \"/api\",\n    })\n      .then((response) => {\n        const data = response.data;\n        setPosts(data);\n      })\n      .catch(() => {\n        alert(\"Error retrieving data!\");\n      });\n  };\n\n  const displayPosts = (posts) => {\n    //console.log(posts);\n    if (!posts.length) return null;\n    return posts.map((post, index) => (\n      <div className=\"posts\" key={index}>\n        <h3 className=\"post-title\">{post.title}</h3>\n        <p className=\"post-body\">{post.body}</p>\n      </div>\n    ));\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  return (\n    <Fragment>\n      <div id=\"container\">\n        <h1 id=\"title\">Post App - Fullstack application(MERN)</h1>\n        <h2 id=\"subtitle\">Welcome to my App!</h2>\n        <form id=\"form\" onSubmit={handleSubmit}>\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Enter your title\"\n              value={title}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"form-input\">\n            <textarea\n              name=\"body\"\n              placeholder=\"Enter your body\"\n              value={body}\n              onChange={handleChange}\n            ></textarea>\n          </div>\n          <button type=\"submit\">Submit</button>\n        </form>\n        <div className=\"posts-container\">{displayPosts(posts)}</div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { React, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <Fragment>\n    <App />\n  </Fragment>,\n  document.querySelector(\"#root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}